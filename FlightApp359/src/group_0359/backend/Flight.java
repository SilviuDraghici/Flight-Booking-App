package group_0359.backend;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * A flight with a flight number, a departure date 
 * and time, an arrival date and time, an airline, an
 * origin, a destination, a cost, a travel time and an
 * available number of seats for sale.
 * 
 * @author Mandy Li
 *
 */
public final class Flight implements Comparable<Flight>, Serializable {

    /** UID generated by Eclipse. */
    private static final long serialVersionUID = 8649101769777438089L;
    
    /** The flight number of this Flight, the unique identifier. */
    private final String number;

    /** The airline name of this Flight. */
    private String airline;

    /** The number of seats available in this Flight. */
    private int numSeats;
    
    /** The departure date and time of this Flight. */
    private DateTime departDateTime;

    /** The arrival date and time of this Flight. */
    private DateTime arrivalDateTime;

    /** The origin of this Flight. */
    private String origin;

    /** The destination of this Flight. */
    private String destination;

    /** The cost of this Flight in dollars. */
    private double price; 

    /** The travel time of this Flight in hours. */
    private double travelTime;
    
    /** The people who booked this Flight. */
    private List<String> whoBooked;
    
    /**
     * Creates a new Flight with the given flight number, 
     * departure date and time, arrival date and time, airline, 
     * origin, destination, cost and travel time.
     * @param number the flight number of the new Flight
     * @param departDateTime the departure date and time of the new Flight
     * @param arrivalDateTime the arrival date and time of the new Flight
     * @param airline the airline name of the new Flight
     * @param origin the origin of the new Flight
     * @param destination the destination of the new Flight
     * @param price the cost of the new Flight in dollars
     * @param numSeats the number of seats available for the 
     *        new Flight
     */
    public Flight(String number, DateTime departDateTime,
            DateTime arrivalDateTime, String airline, String origin,
            String destination, double price, int numSeats) {
        this.number = number;
        this.airline = airline;
        this.numSeats = numSeats;
        this.departDateTime = departDateTime;
        this.arrivalDateTime = arrivalDateTime;
        this.origin = origin;
        this.destination = destination;
        this.price = price;
        this.travelTime = this.arrivalDateTime.timeDiff(this.departDateTime);
        this.whoBooked = new ArrayList<String>();
    }
     
    /**
     * Creates a new Flight with the given flight number, 
     * departure date and time, arrival date and time, airline, 
     * origin, destination, cost and travel time.
     * @param number the flight number of the new Flight
     * @param departDateTime the departure date and time of the new Flight,
     *        in YYYY-MM-DD HH:MM format
     * @param arrivalDateTime the arrival date and time of the new Flight,
     *        in YYYY-MM-DD HH:MM format
     * @param airline the airline name of the new Flight
     * @param origin the origin of the new Flight
     * @param destination the destination of the new Flight
     * @param price the cost of the new Flight in dollars
     * @param numSeats the number of seats available for the 
     *        new Flight
     */
    public Flight(String number, String departDateTime,
            String arrivalDateTime, String airline, String origin,
            String destination, double price, int numSeats) {
        this(number, new DateTime(departDateTime), new DateTime(arrivalDateTime),
                airline, origin, destination, price, numSeats);
    }
  
    /**
     * Creates a new Flight with the given flight number, 
     * departure date and time, arrival date and time, airline, 
     * origin, destination, cost and travel time.
     * @param number the flight number of the new Flight
     * @param departDateTime the departure date and time of the new Flight,
     *        in YYYY-MM-DD HH:MM format
     * @param arrivalDateTime the arrival date and time of the new Flight,
     *        in YYYY-MM-DD HH:MM format
     * @param airline the airline name of the new Flight
     * @param origin the origin of the new Flight
     * @param destination the destination of the new Flight
     * @param price the cost of the new Flight in dollars
     */
    public Flight(String number, String departDateTime,
            String arrivalDateTime, String airline, String origin,
            String destination, double price) {
        this(number,departDateTime, arrivalDateTime, airline, origin,
                destination, price, 0);   
    }
    
    /**
     * Returns the flight number of this Flight.
     * @return the number the flight number of this Flight.
     */
    public String getNumber() {
        return number;
    }

    /**
     * Returns the airline name of this Flight.
     * @return the airline the airline name of this Flight.
     */
    public String getAirline() {
        return airline;
    }
    
    /**
     * Returns the departure date and time of this Flight.
     * @return the departDateTime the departure date and time of this Flight.
     */
    public DateTime getDepartDateTime() {
        return departDateTime;
    }

    /**
     * Returns the arrival date and time of this Flight.
     * @return the arrivalDateTime the arrival date and time of this Flight.
     */
    public DateTime getArrivalDateTime() {
        return arrivalDateTime;
    }

    /**
     * Returns the origin of this Flight.
     * @return the origin the origin of this Flight.
     */
    public String getOrigin() {
        return origin;
    }

    /**
     * Returns the destination of this Flight.
     * @return the destination the destination of this Flight.
     */
    public String getDestination() {
        return destination;
    }

    /**
     * Returns the cost of this Flight in dollars.
     * @return the price the cost of this Flight in dollars.
     */
    public double getCost() {
        return price;
    }

    /**
     * Returns the travel time of this Flight in hours.
     * @return the travelTime the travel time of this Flight in hours.
     */
    public double getTravelTime() {
        return travelTime;
    }

    /**
     * Sets the airline of this Flight to airline.
     * @param airline the new airline of this Flight
     */
    public void setAirline(String airline) {
        this.airline = airline;
    }
    
    /**
     * Returns the number of seats available for sale 
     * in this Flight.
     * @return the number of seats available for sale
     *         for this Flight.
     */
    public int getNumSeats() {
        return numSeats;
    }

    /**
     * Sets the departure date and time of this
     * Flight to departDateTime.
     * @param departDateTime the new departure date and
     *        time of this Flight
     */
    public void setDepartDateTime(DateTime departDateTime) {
        this.departDateTime = departDateTime;
        this.travelTime = this.arrivalDateTime.timeDiff(this.departDateTime);
    }
    
    /**
     * Sets the arrival date and time of this
     * Flight to arrivalDateTime.
     * @param arrivalDateTime the new arrival date and
     *        time of this Flight
     */
    public void setArrivalDateTime(DateTime arrivalDateTime) {
        this.arrivalDateTime = arrivalDateTime;
        this.travelTime = this.arrivalDateTime.timeDiff(this.departDateTime);
    }

    /**
     * Sets the origin of this Flight to origin.
     * @param origin the new origin of this Flight
     */
    public void setOrigin(String origin) {
        this.origin = origin;
    }

    /**
     * Sets the destination of this Flight to
     * destination.
     * @param destination the new destination of
     *        this Flight
     */
    public void setDestination(String destination) {
        this.destination = destination;
    }

    /**
     * Sets the cost of this Flight to price in dollars.
     * @param price the new cost of this Flight in dollars
     */
    public void setCost(double price) {
        this.price = price;
    }

    /**
     * Sets the number of available seats in
     * this Flight to numSeats.
     * @param travelTime the new available
     *        number of Seats of this Flight.
     */
    public void setNumSeats(int numSeats) {
        this.numSeats = numSeats;
    }
    
    /**
     * Returns all ids used this book this 
     * Flight.
     * @return all ids used this book this 
     *         Flight.
     */
    public List<String> getBookers() {
        return whoBooked;
    }

    /**
     * Books an available seat in this Flight under
     * the given id. Does nothing if there are no
     * available seats to book.
     * @param id the id with which to book an available
     *        set in this Flight.
     */
    public void book(String id) {
        if (numSeats > 0) {
            this.numSeats -= 1;
            this.whoBooked.add(id);
        }
    }

    /**
     * Cancels a booking of this Flight under
     * the given id. Does nothing if this Flight
     * has not been booked under the given id.
     * @param id the id of someone who booked this
     *        Flight
     */
    public void cancelBook(String id) {
        if (whoBooked.contains(id)) {
            this.numSeats += 1;
            this.whoBooked.remove(id);
        }
    }
    
    /** 
     * Returns the string representation of this Flight in the format,
     * "Number,DepartureDateTime,ArrivalDateTime,Airline,Origin,Destination". 
     * @return the string representation of this Flight in the format,
     * "Number,DepartureDateTime,ArrivalDateTime,Airline,Origin,Destination". 
     */
    public String toStringWithoutCost() {
        return (number + "," + departDateTime + "," + arrivalDateTime
                + "," + airline + "," + origin  + "," + destination);
    }

    /**
     * Returns the string representation of this Flight in the 
     * format,
     * "Number,DepartureDateTime,ArrivalDateTime,Airline,
     * Origin,Destination,Price,numSeats" in one line.
     */
    @Override
    public String toString() {
        return (toStringWithoutCost() + String.format(",%.2f", price));
    }
    
    /**
     * Defines a natural order for Flight objects by comparing
     * all the fields in this order:
     * departure date and time
     * origin
     * destination
     * arrival
     * date and time
     * price
     * travel time
     * airline name
     * flight number
     * @param flight the given Flight to compare to this Flight
     */
    public int compareTo(Flight flight) {

        int compareVal = 0;

        compareVal = departDateTime.compareTo(flight.departDateTime);
        if (compareVal != 0) {
            return compareVal;
        }
        compareVal = origin.compareTo(flight.origin);
        if (compareVal != 0) {
            return compareVal;
        }
        compareVal = destination.compareTo(flight.destination);
        if (compareVal != 0) {
            return compareVal;
        }
        compareVal = arrivalDateTime.compareTo(flight.arrivalDateTime);
        if (compareVal != 0) {
            return compareVal;
        }
        compareVal = (int) Math.ceil(price - flight.price);
        if (compareVal != 0) {
            return compareVal;
        }
        compareVal = (int) Math.ceil(travelTime - flight.travelTime);
        if (compareVal != 0) {
            return compareVal;
        }
        compareVal = airline.compareTo(flight.airline);
        if (compareVal != 0) {
            return compareVal;
        }
        compareVal = number.compareTo(flight.number);
        if (compareVal != 0) {
            return compareVal;
        }
        return compareVal;
    }
    
    /**
     * Returns true if the given Flight has the same flight
     * number to this Flight.
     * @param other the given Flight to compare to this Flight
     */
    public boolean equals(Object other){
        if(!(other instanceof Flight))
            return false;
        else{
            return (this.number.equals(((Flight)other).number));
        }
    }
}

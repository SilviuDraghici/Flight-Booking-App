package group_0359.backend;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * A user of the system.
 * User can book and search itineraries. 
 * User can upload client and flight information.
 * User can view clients, and client information.
 * @author Anushay
 *
 */
public class User implements Serializable{

    /** UID generated by Eclipse. */
    private static final long serialVersionUID = 1999337183709061993L;
	private String lastName; // The users last name
    private String firstName; // the users first name
    private String email; // The users email 
    private String address; // The users current address
    private String creditCardNumber; // The users credit card number
    private String expiryDate; // The users expiry date, format: YYYY-MM-DD
    private List<Itinerary> bookedItineraries = new ArrayList<Itinerary>(); // The users booked itineraries 

    /** This is true if this User has administration access. */
    private boolean isAdmin;

    /**
     * Creates a new User with the given last name, first name,
     * email, address, credit card number, expiry date of the 
     * credit card and, without administration access.
     * @param lastName the last name of the new User
     * @param firstName the first name of the new User
     * @param email the email of the new User
     * @param address the address of the new User
     * @param creditCardNumber the credit card number of the new User
     * @param expiryDate the expiry date of the new User
     */
    public User(String lastName, String firstName, String email, String address,
            String creditCardNumber, String expiryDate){
        this.lastName = lastName;
        this.firstName = firstName;
        this.email = email;
        this.address = address;
        this.creditCardNumber = creditCardNumber;
        this.expiryDate = expiryDate;
        this.isAdmin = false;
    }

    /**
     * Creates a new User with the given last name, first name,
     * email, address, credit card number, expiry date of the 
     * credit card, with or without administration access.
     * @param lastName the last name of the new User
     * @param firstName the first name of the new User
     * @param email the email of the new User
     * @param address the address of the new User
     * @param creditCardNumber the credit card number of the new User
     * @param expiryDate the expiry date of the credit card of the new User
     * @param isAdmin true if the new User has administration access
     */
    public User(String lastName, String firstName, String email, String address,
            String creditCardNumber, String expiryDate, boolean isAdmin){
        this(lastName,firstName,email,address,creditCardNumber,expiryDate);
        this.isAdmin = isAdmin;
    }

    /**
     * @return the lastName
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Returns true if this User is an 
     * administrator.
     * @return true if this User is an
     *         administrator. 
     */
    public boolean isAdmin(){
        return this.isAdmin;
    }

    /**
     * @param lastName the lastName to set
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     * @return the firstName
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * @param firstName the firstName to set
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * @return the email
     */
    public String getEmail() {
        return email;
    }

    /**
     * @return the address
     */
    public String getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * @return the creditCardNumber
     */
    public String getCreditCardNumber() {
        return creditCardNumber;
    }

    /**
     * @param creditCardNumber the creditCardNumber to set
     */
    public void setCreditCardNumber(String creditCardNumber) {
        this.creditCardNumber = creditCardNumber;
    }

    /**
     * format: YYYY-MM-DD
     * @return the expiryDate
     */
    public String getExpiryDate() {
        return expiryDate;
    }

    /**
     * format: YYYY-MM-DD
     * @param expiryDate the expiryDate to set
     */
    public void setExpiryDate(String expiryDate) {
        this.expiryDate = expiryDate;
    }

    /**
     * @return the bookedItineraries
     */
    public List<Itinerary> getBookedItineraries() {
        return bookedItineraries;
    }
    
    /**
     * Set's booked Itineraries
     */
    public List<Itinerary> setBookedItineraries(Itinerary itinerary) {
        return bookedItineraries;
    }

    /**
     * Returns the String representation of User
     */
    public String toString(){
        return (lastName + ',' + firstName + ',' + email + ',' +
                address + ',' + creditCardNumber + ',' + expiryDate);
    }

    /**
     * Adds the given Itinerary into list of booked itineraries
     * of this User and updates number of seats available for each 
     * Flight in the given Itinerary.
     * @param itinerary the Itinerary to book by this User
     */
    public void bookItinerary(Itinerary itinerary){
        this.bookedItineraries.add(itinerary);
        if (itinerary.bookable()) {
            for (int i = 0; i < itinerary.getNumFlights(); i++) {
                itinerary.getFlight(i).book(email);
            }
        }
    }

    /**
     * Removes the given Itinerary from list of booked itineraries
     * of this User and updates number of seats available for each 
     * Flight in the given Itinerary.
     * @param itinerary the Itinerary to cancel by this User
     */
    public void cancelItinerary(Itinerary itinerary) {
        this.bookedItineraries.remove(itinerary);
        for (int i = 0; i < itinerary.getNumFlights(); i++) {
            itinerary.getFlight(i).cancelBook(email);
        }
    }
    
    /**
     * View booked itineraries
     */
    public void viewBookedItineraries(){
        displayItineraries(bookedItineraries);
    }

    /**
     * Prints out the given itineraries in the following format.
     * @param itineraries the given itineraries to print out
     */
    private void displayItineraries(List<Itinerary> itineraries) {
        for (int i = 0; i < itineraries.size(); i++) {
            System.out.println(itineraries.get(i));
        }
    }

    public boolean equals(Object other){
        if(!(other instanceof User))
            return false;
        else{
            return (this.email.equals(((User)other).email));
        }
    }
}
